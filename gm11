{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"gm11","provenance":[{"file_id":"/v2/external/notebooks/empty.ipynb","timestamp":1624122818614}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"lIYdn1woOS1n","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"error","timestamp":1624169466885,"user_tz":-360,"elapsed":35,"user":{"displayName":"Asef Shahriar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhGymLJNQzc-swAHFXhTyj8xDOH1nKeM3QxCwetvA=s64","userId":"15374243428059593795"}},"outputId":"26c8f64f-6f24-41ca-a614-ff4199971250"},"source":["from pandas import Series\n","from pandas import DataFrame\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","\n","class Gray_model:\n","    def __init__(self):\n","        self.a_hat = None\n","        self.x0 = None\n","\n","    def fit(self,\n","            series=pd.Series(index=[i for i in range(2010,2020)], data=[7.5, 51.25, 58.25, 88, 168.75, 156.75, 169, 182.25, 222, 244])):\n","        \"\"\"\n","        Series is a pd.Series with index as its date.\n","        :param series: pd.Series\n","        :return: None\n","        \"\"\"\n","        self.a_hat = self._identification_algorithm(series.values)\n","        self.x0 = series.values[0]\n","\n","    def predict(self, interval):\n","        result = []\n","        for i in range(interval):\n","            result.append(self.__compute(i))\n","        result = self.__return(result)\n","        return result\n","\n","    def _identification_algorithm(self, series):\n","        B = np.array([[1] * 2] * (len(series) - 1))\n","        series_sum = np.cumsum(series)\n","        for i in range(len(series) - 1):\n","            B[i][0] = (series_sum[i] + series_sum[i + 1]) * (-1.0) / 2\n","        Y = np.transpose(series[1:])\n","        BT = np.transpose(B)\n","        a = np.linalg.inv(np.dot(BT, B))\n","        a = np.dot(a, BT)\n","        a = np.dot(a, Y)\n","        a = np.transpose(a)\n","        return a\n","\n","    def score(self, series_true, series_pred, index):\n","        error = np.ones(len(series_true))\n","        relativeError = np.ones(len(series_true))\n","        for i in range(len(series_true)):\n","            error[i] = series_true[i] - series_pred[i]\n","            relativeError[i] = error[i] / series_pred[i] * 100\n","        score_record = {'GM': np.cumsum(series_pred),\n","                        '1â€”AGO': np.cumsum(series_true),\n","                        'Returnvalue': series_pred,\n","                        'Real_value': series_true,\n","                        'Error': error,\n","                        'RelativeError(%)': (relativeError)\n","                        }\n","        scores = DataFrame(score_record, index=index)\n","        return scores\n","\n","    def __compute(self, k):\n","        return (self.x0 - self.a_hat[1] / self.a_hat[0]) * np.exp(-1 * self.a_hat[0] * k) + self.a_hat[1] / self.a_hat[\n","            0]\n","\n","    def __return(self, series):\n","        tmp = np.ones(len(series))\n","        for i in range(len(series)):\n","            if i == 0:\n","                tmp[i] = series[i]\n","            else:\n","                tmp[i] = series[i] - series[i - 1]\n","        return tmp\n","\n","    def evaluate(self, series_true, series_pred):\n","        scores = self.score(series_true, series_pred, np.arange(len(series_true)))\n","\n","        error_square = np.dot(scores, np.transpose(scores))\n","        error_avg = np.mean(error_square)\n","\n","        S = 0  # X0's relevance\n","        for i in range(1, len(series_true) - 1, 1):\n","            S += series_true[i] - series_true[0] + (series_pred[-1] - series_pred[0]) / 2\n","        S = np.abs(S)\n","\n","        SK = 0  # XK's relevance\n","        for i in range(1, len(series_true) - 1, 1):\n","            SK += series_pred[i] - series_pred[0] + (series_pred[-1] - series_pred[0]) / 2\n","        SK = np.abs(SK)\n","\n","        S_Sub = 0  # |S-SK|b\n","        for i in range(1, len(series_true) - 1, 1):\n","            S_Sub += series_true[i] - series_true[0] - (series_pred[i] - series_pred[0]) + ((series_true[-1] -\n","                                                                                             series_true[0]) - (\n","                                                                                            series_pred[i] -\n","                                                                                            series_pred[0])) / 2\n","        S_Sub = np.abs(S_Sub)\n","\n","        T = (1 + S + SK) / (1 + S + SK + S_Sub)\n","\n","        level = 0\n","        if T >= 0.9:\n","            level = 1\n","        # print ('Accuracy is one level')\n","        elif T >= 0.8:\n","            level = 2\n","        # print ('Accuracy is level two')\n","        elif T >= 0.7:\n","            level = 3\n","        # print ('Accuracy is three levels')\n","        elif T >= 0.6:\n","            level = 4\n","        # print ('The precision is four levels')\n","        return 1 - T, level\n","\n","    def plot(self, series_true, series_pred, index):\n","        df = pd.DataFrame(index=index)\n","        df['Real'] = series_true\n","        df['Forcast'] = series_pred\n","        plt.figure()\n","        df.plot(figsize=(7, 5))\n","        plt.xlabel('year')\n","        plt.show()\n","\n","Gray_model.fit()"],"execution_count":5,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-bde174664ea9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    119\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m \u001b[0mGray_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: fit() missing 1 required positional argument: 'self'"]}]},{"cell_type":"code","metadata":{"id":"_0aYffwoRnga"},"source":[""],"execution_count":null,"outputs":[]}]}